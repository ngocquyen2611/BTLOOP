package org.thuvienbook.controller;

import org.thuvienbook.Main;
import org.thuvienbook.model.*;
import org.thuvienbook.util.TextStorage;
import org.thuvienbook.util.DocumentStorage;
import org.thuvienbook.view.AddDocumentDialog;
import org.thuvienbook.view.LibraryGUI;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.stream.Collectors;

public class GUIController {
    private final Library thuVien;
    private final LibraryGUI giaoDien;
    private final User nguoiDangNhap;

    public GUIController(Library thuVien, LibraryGUI giaoDien, User nguoiDangNhap) {
        this.thuVien = thuVien;
        this.giaoDien = giaoDien;
        this.nguoiDangNhap = nguoiDangNhap;

        if (nguoiDangNhap.getRole() == UserRole.ADMIN) {
            giaoDien.panelButton.add(giaoDien.btnThem);
            giaoDien.panelButton.add(giaoDien.btnXoa);
            giaoDien.panelButton.add(giaoDien.btnCapNhat);
            giaoDien.panelButton.add(giaoDien.btnHienThi);
            giaoDien.panelButton.add(giaoDien.btnThongKe);
            giaoDien.panelButton.add(giaoDien.btnTaiKhoan);
        } else {
            giaoDien.panelButton.add(giaoDien.btnHienThi);
            giaoDien.panelButton.add(giaoDien.btnMuon);
            giaoDien.panelButton.add(giaoDien.btnTra);
        }
        giaoDien.panelButton.add(giaoDien.btnThoat);

        giaoDien.btnThem.addActionListener(e -> themTaiLieu());
        giaoDien.btnXoa.addActionListener(e -> xoaTaiLieu());
        giaoDien.btnCapNhat.addActionListener(e -> capNhatTaiLieu());
        giaoDien.btnHienThi.addActionListener(e -> hienThiTatCa());
        giaoDien.btnMuon.addActionListener(e -> muonTaiLieu());
        giaoDien.btnTra.addActionListener(e -> traTaiLieu());
        giaoDien.btnThongKe.addActionListener(e -> hienThiThongKeMuon());
        giaoDien.btnTaiKhoan.addActionListener(e -> hienThiDanhSachNguoiDung());
        giaoDien.btnThoat.addActionListener(e -> System.exit(0));

        giaoDien.btnDangXuat.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(null, "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?", "ƒêƒÉng xu·∫•t",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                giaoDien.dispose();
                Main.main(null);
            }
        });

        if (giaoDien.btnSearch != null) {
            giaoDien.btnSearch.addActionListener(e -> timKiemTaiLieu());
        } else {
            System.err.println("‚ùå btnSearch is null");
        }

        hienThiTatCa();
        giaoDien.getTable().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String id = giaoDien.layMaTaiLieuDangChon();
                if (id != null) {
                    Document doc = thuVien.findDocument(id);
                    if (doc != null) {
                        String loai = (doc instanceof Book) ? "S√°ch" : "Lu·∫≠n vƒÉn";
                        JOptionPane.showMessageDialog(null,
                                "üìò M√£: " + doc.getId() +
                                        "\nüìñ Ti√™u ƒë·ªÅ: " + doc.getTitle() +
                                        "\n‚úçÔ∏è T√°c gi·∫£: " + doc.getAuthor() +
                                        "\nüì¶ S·ªë l∆∞·ª£ng: " + doc.getQuantity() +
                                        "\nüìö Lo·∫°i: " + loai,
                                "Th√¥ng tin t√†i li·ªáu", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        });
    }

    public void showGUI() {
        giaoDien.setVisible(true);
    }

    private void hienThiTatCa() {
        Object[][] data = thuVien.getDocuments().stream()
                .map(d -> new Object[] { d.getId(), d.getTitle(), d.getAuthor(), d.getQuantity() })
                .toArray(Object[][]::new);
        giaoDien.capNhatBang(data);
        giaoDien.capNhatThongTinHeThong(thuVien.getDocuments().size(), thuVien.getUsers().size());
    }

    private void timKiemTaiLieu() {
        String keyword = giaoDien.tfSearch.getText().trim();
        List<Document> results;

        if (keyword.isEmpty()) {
            hienThiTatCa();
            JOptionPane.showMessageDialog(giaoDien, "Hi·ªÉn th·ªã t·∫•t c·∫£ t√†i li·ªáu.");
            return;
        }

        results = thuVien.searchDocuments(keyword);

        Object[][] data = results.stream()
                .map(d -> new Object[] { d.getId(), d.getTitle(), d.getAuthor(), d.getQuantity() })
                .toArray(Object[][]::new);

        giaoDien.capNhatBang(data);
        JOptionPane.showMessageDialog(giaoDien, "‚úÖ T√¨m th·∫•y " + results.size() + " t√†i li·ªáu ph√π h·ª£p.");
    }

    private void themTaiLieu() {
        AddDocumentDialog dialog = new AddDocumentDialog(giaoDien);
        dialog.setVisible(true);
        if (dialog.newDocument != null) {
            thuVien.addDocument(dialog.newDocument);
            DocumentStorage.save(thuVien.getDocuments());
            hienThiTatCa();
            JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ th√™m.");
        }
    }

    private void xoaTaiLieu() {
        String id = giaoDien.layMaTaiLieuDangChon();
        if (id == null) {
            id = JOptionPane.showInputDialog("Nh·∫≠p m√£ t√†i li·ªáu c·∫ßn xo√°:");
            if (id == null || id.trim().isEmpty()) return;
        }

        int confirm = JOptionPane.showConfirmDialog(giaoDien, "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° t√†i li·ªáu c√≥ m√£ " + id + "?", "X√°c nh·∫≠n xo√°", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            if (thuVien.removeDocument(id)) {
                DocumentStorage.save(thuVien.getDocuments());
                hienThiTatCa();
                JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ xo√°.");
            } else {
                JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu c√≥ m√£ " + id + ".");
            }
        }
    }

    private void capNhatTaiLieu() {
        String id = giaoDien.layMaTaiLieuDangChon();
        if (id == null) {
            id = JOptionPane.showInputDialog("Nh·∫≠p m√£ t√†i li·ªáu c·∫ßn c·∫≠p nh·∫≠t:");
            if (id == null || id.trim().isEmpty()) return;
        }

        Document doc = thuVien.findDocument(id);
        if (doc == null) {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu c√≥ m√£ " + id + ".");
            return;
        }

        JTextField tfTitle = new JTextField(doc.getTitle());
        JTextField tfAuthor = new JTextField(doc.getAuthor());
        JTextField tfQuantity = new JTextField(String.valueOf(doc.getQuantity()));

        Object[] form = {
                "Ti√™u ƒë·ªÅ m·ªõi:", tfTitle,
                "T√°c gi·∫£ m·ªõi:", tfAuthor,
                "S·ªë l∆∞·ª£ng m·ªõi:", tfQuantity
        };

        int option = JOptionPane.showConfirmDialog(giaoDien, form, "C·∫≠p nh·∫≠t t√†i li·ªáu: " + doc.getId(), JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            String newTitle = tfTitle.getText().trim();
            String newAuthor = tfAuthor.getText().trim();
            String quantityText = tfQuantity.getText().trim();

            if (newTitle.isEmpty() || newAuthor.isEmpty() || quantityText.isEmpty()) {
                JOptionPane.showMessageDialog(this.giaoDien, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
                return;
            }

            try {
                int newQuantity = Integer.parseInt(quantityText);
                if (newQuantity < 0) throw new NumberFormatException();

                thuVien.updateDocument(id, newTitle, newAuthor, newQuantity);
                DocumentStorage.save(thuVien.getDocuments());
                hienThiTatCa();
                JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu.");

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(giaoDien, "S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m.");
            }
        }
    }

    private void muonTaiLieu() {
        String id = JOptionPane.showInputDialog(giaoDien, "Nh·∫≠p m√£ t√†i li·ªáu mu·ªën m∆∞·ª£n:");
        if (id == null || id.trim().isEmpty()) return;

        Document doc = thuVien.findDocument(id);
        if (doc == null) {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu c√≥ m√£ " + id + ".");
            return;
        }

        if (thuVien.borrowDocument(nguoiDangNhap, id)) {
            System.out.println("Danh s√°ch m∆∞·ª£n c·ªßa " + nguoiDangNhap.getUsername() + ": " + nguoiDangNhap.getBorrowedDocuments());
            TextStorage.saveUsers(thuVien.getUsers());
            DocumentStorage.save(thuVien.getDocuments());
            hienThiTatCa();
            JOptionPane.showMessageDialog(giaoDien, "üì• M∆∞·ª£n th√†nh c√¥ng.");
        } else {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng th·ªÉ m∆∞·ª£n t√†i li·ªáu c√≥ m√£ " + id + " (s·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß).");
        }
    }

    private void traTaiLieu() {
        String id = JOptionPane.showInputDialog(giaoDien, "Nh·∫≠p m√£ t√†i li·ªáu mu·ªën tr·∫£:");
        if (id == null || id.trim().isEmpty()) return;

        Document doc = thuVien.findDocument(id);
        if (doc == null) {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu c√≥ m√£ " + id + ".");
            return;
        }

        if (thuVien.returnDocument(nguoiDangNhap, id)) {
            System.out.println("Danh s√°ch m∆∞·ª£n c·ªßa " + nguoiDangNhap.getUsername() + " sau khi tr·∫£: " + nguoiDangNhap.getBorrowedDocuments());
            TextStorage.saveUsers(thuVien.getUsers());
            DocumentStorage.save(thuVien.getDocuments());
            hienThiTatCa();
            JOptionPane.showMessageDialog(giaoDien, "üì§ Tr·∫£ th√†nh c√¥ng.");
        } else {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Kh√¥ng th·ªÉ tr·∫£ t√†i li·ªáu c√≥ m√£ " + id + " (ch∆∞a m∆∞·ª£n ho·∫∑c kh√¥ng t·ªìn t·∫°i).");
        }
    }

    private void hienThiThongKeMuon() {
        List<String> danhSach = thuVien.thongTinMuonTra();
        StringBuilder sb = new StringBuilder("üìã Danh s√°ch m∆∞·ª£n:\n");
        for (User u : thuVien.getUsers()) {
            if (!u.getBorrowedDocuments().isEmpty()) {
                System.out.println(u.getUsername() + " m∆∞·ª£n: " + u.getBorrowedDocuments());
                sb.append("‚Ä¢ ").append(u.getUsername()).append(" ƒë√£ m∆∞·ª£n:\n");
                for (Document doc : u.getBorrowedDocuments()) {
                    String loai = (doc instanceof Book) ? "S√°ch" : "Lu·∫≠n vƒÉn";
                    sb.append("  - ").append(doc.getTitle()).append(" (Lo·∫°i: ").append(loai).append(", S·ªë l∆∞·ª£ng: 1)\n");
                }
            }
        }
        if (sb.toString().equals("üìã Danh s√°ch m∆∞·ª£n:\n")) {
            sb.append("Kh√¥ng c√≥ ai m∆∞·ª£n.");
        }

        try (PrintWriter pw = new PrintWriter("muon_tra.txt", "UTF-8")) {
            pw.println("DANH S√ÅCH M∆Ø·ª¢N:");
            for (User u : thuVien.getUsers()) {
                if (!u.getBorrowedDocuments().isEmpty()) {
                    pw.println("- " + u.getUsername() + " ƒë√£ m∆∞·ª£n:");
                    for (Document doc : u.getBorrowedDocuments()) {
                        String loai = (doc instanceof Book) ? "S√°ch" : "Lu·∫≠n vƒÉn";
                        pw.println("  - " + doc.getTitle() + " (Lo·∫°i: " + loai + ", S·ªë l∆∞·ª£ng: 1)");
                    }
                }
            }
            if (pw.checkError()) {
                throw new IOException("Ghi file th·∫•t b·∫°i.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(giaoDien, "‚ùå Ghi file th·ªëng k√™ th·∫•t b·∫°i.");
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(giaoDien, sb.toString(), "Th·ªëng k√™ M∆∞·ª£n Tr·∫£", JOptionPane.INFORMATION_MESSAGE);
    }

    private void hienThiDanhSachNguoiDung() {
        List<User> users = thuVien.getUsers();
        String[] columns = { "ID", "T√™n ƒëƒÉng nh·∫≠p", "M·∫≠t kh·∫©u", "H·ªç t√™n", "Vai tr√≤", "S√°ch m∆∞·ª£n" };
        Object[][] data = new Object[users.size()][6];

        for (int i = 0; i < users.size(); i++) {
            User u = users.get(i);
            data[i][0] = u.getUserId();
            data[i][1] = u.getUsername();
            data[i][2] = u.getPassword();
            data[i][3] = u.getFullName();
            data[i][4] = u.getRole().name();
            data[i][5] = u.getBorrowedDocuments().size();
        }
        JTable table = new JTable(data, columns);
        table.setRowHeight(26);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        JScrollPane scrollPane = new JScrollPane(table);

        JButton btnAdd = new JButton("‚ûï Th√™m");
        JButton btnEdit = new JButton("‚úèÔ∏è S·ª≠a");
        JButton btnDelete = new JButton("üóëÔ∏è Xo√°");
        JButton btnClose = new JButton("‚ùå ƒê√≥ng");

        JPanel bottomPanel = new JPanel();
        bottomPanel.add(btnAdd);
        bottomPanel.add(btnEdit);
        bottomPanel.add(btnDelete);
        bottomPanel.add(btnClose);

        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.add(new JLabel("üìã Qu·∫£n l√Ω t√†i kho·∫£n", SwingConstants.CENTER), BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(bottomPanel, BorderLayout.SOUTH);

        JDialog dialog = new JDialog(giaoDien, "T√†i kho·∫£n ng∆∞·ªùi d√πng", true);
        dialog.setSize(700, 400);
        dialog.setLocationRelativeTo(giaoDien);
        dialog.add(panel);

        btnAdd.addActionListener(e -> {
            JTextField tfUser = new JTextField();
            JPasswordField tfPass = new JPasswordField();
            JTextField tfName = new JTextField();
            JComboBox<String> cbRole = new JComboBox<>(new String[] { "USER", "ADMIN" });

            Object[] form = { "T√™n ƒëƒÉng nh·∫≠p:", tfUser, "M·∫≠t kh·∫©u:", tfPass, "H·ªç t√™n:", tfName, "Vai tr√≤:", cbRole };

            int ok = JOptionPane.showConfirmDialog(dialog, form, "Th√™m t√†i kho·∫£n", JOptionPane.OK_CANCEL_OPTION);
            if (ok == JOptionPane.OK_OPTION) {
                String username = tfUser.getText().trim();
                String password = new String(tfPass.getPassword()).trim();
                String fullName = tfName.getText().trim();
                String role = cbRole.getSelectedItem().toString();

                if (username.isEmpty() || password.isEmpty() || fullName.isEmpty()) {
                    JOptionPane.showMessageDialog(dialog, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
                    return;
                }

                if (thuVien.findUser(username) != null) {
                    JOptionPane.showMessageDialog(dialog, "‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.");
                    return;
                }

                User u = new User(username, password, fullName, UserRole.valueOf(role));
                thuVien.addUser(u);
                TextStorage.saveUsers(thuVien.getUsers());
                dialog.dispose();
                hienThiDanhSachNguoiDung();
                JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ th√™m t√†i kho·∫£n.");
            }
        });

        btnEdit.addActionListener(e -> {
            int row = table.getSelectedRow();
            if (row >= 0) {
                String oldUsername = table.getValueAt(row, 1).toString();
                User user = thuVien.findUser(oldUsername);
                if (user == null || oldUsername.equalsIgnoreCase("admin")) {
                    JOptionPane.showMessageDialog(dialog, "‚ùå Kh√¥ng th·ªÉ s·ª≠a t√†i kho·∫£n n√†y.");
                    return;
                }
                JTextField tfUsername = new JTextField(user.getUsername());
                JTextField tfFullName = new JTextField(user.getFullName());
                JPasswordField tfPassword = new JPasswordField(user.getPassword());
                JComboBox<String> cbRole = new JComboBox<>(new String[] { "USER", "ADMIN" });
                cbRole.setSelectedItem(user.getRole().name());

                if (nguoiDangNhap.getRole() != UserRole.ADMIN || !nguoiDangNhap.getUsername().equalsIgnoreCase("admin")) {
                    tfUsername.setEditable(false);
                    if (user.getRole() == UserRole.ADMIN) {
                        cbRole.setEnabled(false);
                    }
                }

                Object[] form = { "T√™n ƒëƒÉng nh·∫≠p:", tfUsername, "M·∫≠t kh·∫©u:", tfPassword, "H·ªç t√™n:", tfFullName, "Vai tr√≤:", cbRole };

                int ok = JOptionPane.showConfirmDialog(dialog, form, "S·ª≠a t√†i kho·∫£n: " + oldUsername, JOptionPane.OK_CANCEL_OPTION);
                if (ok == JOptionPane.OK_OPTION) {
                    String newFullName = tfFullName.getText().trim();
                    String newPassword = new String(tfPassword.getPassword()).trim();
                    String newRole = cbRole.getSelectedItem().toString();

                    if (newFullName.isEmpty() || newPassword.isEmpty()) {
                        JOptionPane.showMessageDialog(dialog, "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin H·ªç t√™n v√† M·∫≠t kh·∫©u.");
                        return;
                    }

                    user.setPassword(newPassword);
                    user.setFullName(newFullName);
                    user.setRole(UserRole.valueOf(newRole));

                    TextStorage.saveUsers(thuVien.getUsers());
                    dialog.dispose();
                    hienThiDanhSachNguoiDung();
                    JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n.");
                }
            } else {
                JOptionPane.showMessageDialog(dialog, "‚ö†Ô∏è Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn s·ª≠a.");
            }
        });

        btnDelete.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                String username = table.getValueAt(selectedRow, 1).toString();
                if (username.equalsIgnoreCase("admin")) {
                    JOptionPane.showMessageDialog(dialog, "‚ùå Kh√¥ng th·ªÉ xo√° t√†i kho·∫£n qu·∫£n tr·ªã vi√™n m·∫∑c ƒë·ªãnh.");
                    return;
                }
                if (nguoiDangNhap.getRole() != UserRole.ADMIN && nguoiDangNhap.getUsername().equalsIgnoreCase(username)) {
                    JOptionPane.showMessageDialog(dialog, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª± xo√° t√†i kho·∫£n c·ªßa m√¨nh.");
                    return;
                }

                int confirm = JOptionPane.showConfirmDialog(dialog, "B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° t√†i kho·∫£n " + username + "?",
                        "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    User user = thuVien.findUser(username);
                    if (user != null) {
                        thuVien.getUsers().remove(user);
                        TextStorage.saveUsers(thuVien.getUsers());
                        dialog.dispose();
                        hienThiDanhSachNguoiDung();
                        JOptionPane.showMessageDialog(giaoDien, "‚úÖ ƒê√£ xo√° t√†i kho·∫£n.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(dialog, "‚ö†Ô∏è Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn xo√°.");
            }
        });

        btnClose.addActionListener(e -> dialog.dispose());

        dialog.setVisible(true);
    }
}